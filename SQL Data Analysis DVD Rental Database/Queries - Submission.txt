/* Question Set 1 - Question 1
We want to understand more about the movies that families are watching. The following categories are considered family movies: Animation, Children, Classics, Comedy, Family and Music.

Create a query that lists each movie, the film category it is classified in, and the number of times it has been rented out.
*/


SELECT c.name AS category_name, COUNT(r.rental_id) AS rental_count
FROM category c
JOIN film_category fc
ON c.category_id = fc.category_id
JOIN film f
ON fc.film_id = f.film_id
JOIN inventory i
ON f.film_id = i.film_id
JOIN rental r
ON i.inventory_id = r.inventory_id
WHERE c.name IN ('Animation', 'Children', 'Classics', 'Comedy', 'Family',  'Music')
GROUP BY 1
ORDER BY 1;



/* Question Set 1 - Question 2
Now we need to know how the length of rental duration of these family-friendly movies compares to the duration that all movies are rented for. Can you provide a table with the movie titles and divide them into 4 levels (first_quarter, second_quarter, third_quarter, and final_quarter) based on the quartiles (25%, 50%, 75%) of the average rental duration(in the number of days) for movies across all categories? Make sure to also indicate the category that these family-friendly movies fall into.

The data are not very spread out to create a very fun looking solution, but you should see something like the following if you correctly split your data. You should only need the category, film_category, and film tables to answer this and the next questions.
*/


SELECT name, rental_duration, NTILE (4) OVER (ORDER BY rental_duration) AS standard_quartile, COUNT(title)
FROM category c
JOIN film_category fc
ON c.category_id = fc.category_id
JOIN film f
ON fc.film_id = f.film_id
WHERE name IN ('Animation', 'Children', 'Classics', 'Comedy', 'Family',  'Music')
GROUP BY 1, 2
ORDER BY 1, 2, 3;


/* Question Set 1 - Question 3
Finally, provide a table with the family-friendly film category, each of the quartiles, and the corresponding count of movies within each combination of film category for each corresponding rental duration category. The resulting table should have three columns:

*Category
*Rental length category
*Count

The following table header provides a preview of what your table should look like. The Count column should be sorted first by Category and then by Rental Duration category.
*/


WITH t1 AS
	(SELECT f.film_id, NTILE (4) OVER (ORDER BY rental_duration) AS standard_quartile
      	 FROM film f
	JOIN film_category fc
	ON f.film_id = fc.film_id
	JOIN category c
	ON c.category_id = fc.category_id
	WHERE c.name IN ('Animation', 'Children', 'Classics', 'Comedy', 'Family',  'Music'))
SELECT c.name, t1.standard_quartile, COUNT(f.rental_duration) AS count
FROM category c
JOIN film_category fc
ON c.category_id = fc.category_id
JOIN film f
ON fc.film_id = f.film_id
JOIN t1
ON f.film_id = t1.film_id
WHERE name IN ('Animation', 'Children', 'Classics', 'Comedy', 'Family',  'Music')
GROUP BY 1, 2
ORDER BY 1, 2, 3 DESC;



/* Question Set 2 - Q1
We want to find out how the two stores compare in their count of rental orders during every month for all the years we have data for. Write a query that returns the store ID for the store, the year and month and the number of rental orders each store has fulfilled for that month. Your table should include a column for each of the following: year, month, store ID and count of rental orders fulfilled during that month.

The following table header provides a preview of what your table should look like. The count of rental orders is sorted in descending order.

HINT: One way to solve this query is the use of aggregations.
*/


SELECT 
    Rental_month, 
    Rental_year, 
    store_id, 
    COUNT(rental_id) AS Count_rentals
FROM (
    SELECT 
        DATE_PART('month', r.rental_date) AS Rental_month, 
        DATE_PART('year', r.rental_date) AS Rental_year, 
        st.store_id, 
        r.rental_id
    FROM 
        store st
    JOIN 
        staff sf ON st.store_id = sf.store_id
    JOIN 
        rental r ON sf.staff_id = r.staff_id
    ) AS subquery
GROUP BY 1, 2, 3
ORDER BY 4 DESC;















